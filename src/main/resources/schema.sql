DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP  table IF EXISTS FEEDS CASCADE;

CREATE TABLE mpa
(
    mpa_id_in_mpa INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name varchar(40)
);

CREATE TABLE films
(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name varchar(40) NOT NULL,
    description varchar(200),
    release_date DATE,
    duration int,
    mpa_id_in_film int REFERENCES mpa(mpa_id_in_mpa)
);

CREATE TABLE genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(40)
);

CREATE TABLE films_genres
(
    film_id int REFERENCES films(film_id),
    genre_id int REFERENCES genres(genre_id)
);



CREATE TABLE users
(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(40),
    login varchar(40) NOT NULL,
    name varchar(40),
    birthday DATE
);

CREATE TABLE likes
(
    film_id int REFERENCES films(film_id),
    user_id int REFERENCES users(user_id)
);

CREATE TABLE friends
(
    first_user_id int REFERENCES users(user_id),
    second_user_id int REFERENCES users(user_id)
);

create table FEEDS
(
    FEED_ID    INTEGER auto_increment
        primary key,
    USER_ID    INTEGER           not null,
    EVENT_TYPE CHARACTER VARYING not null,
    OPERATION  CHARACTER VARYING not null,
    ENTITY_ID  INTEGER           not null,
    TIME       TIMESTAMP         not null,
    constraint FEEDS_FILM_FEED_FK
        foreign key (ENTITY_ID) references FILMS
            on delete cascade,
    constraint FEEDS_USER_FEED_FK
        foreign key (ENTITY_ID) references USERS
            on delete cascade,
    constraint FEEDS_USER_FK
        foreign key (USER_ID) references USERS
            on delete cascade,
    constraint CHECK_EVENT_TYPE
        check ("EVENT_TYPE" IN ('LIKE', 'REVIEW', 'FRIEND')),
    constraint CHECK_OPERATION
        check ("OPERATION" IN ('REMOVE', 'ADD', 'UPDATE'))
);





