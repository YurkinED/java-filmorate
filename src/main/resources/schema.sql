DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS feeds CASCADE;
DROP TABLE IF EXISTS event_types CASCADE;
DROP TABLE IF EXISTS operations CASCADE;

CREATE TABLE mpa
(
    mpa_id_in_mpa INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name varchar(40)
);

CREATE TABLE films
(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name varchar(40) NOT NULL,
    description varchar(200),
    release_date DATE,
    duration int,
    mpa_id_in_film int REFERENCES mpa(mpa_id_in_mpa)
);

CREATE TABLE genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(40)
);

CREATE TABLE films_genres
(
    film_id int REFERENCES films(film_id),
    genre_id int REFERENCES genres(genre_id)
);

CREATE TABLE users
(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(40),
    login varchar(40) NOT NULL,
    name varchar(40),
    birthday DATE
);

CREATE TABLE likes
(
    film_id int REFERENCES films(film_id),
    user_id int REFERENCES users(user_id)
);

CREATE TABLE friends
(
    first_user_id int REFERENCES users(user_id),
    second_user_id int REFERENCES users(user_id)
);

create table event_types
(
    event_type_id   INTEGER auto_increment
        primary key,
    event_type_name CHARACTER VARYING not null
);

create table operations
(
    operation_id   INTEGER auto_increment
        primary key,
    operation_name CHARACTER VARYING not null
);

create table feeds
(
    feed_id    INTEGER auto_increment
        primary key,
    user_id    INTEGER           not null,
    event_type INTEGER not null,
    operation  INTEGER not null,
    entity_id  INTEGER           not null,
    creation_time  LONG         not null,

    constraint feeds_user_FK
        foreign key (user_id) references users
            on delete cascade,
    constraint "event_type_FK"
        foreign key (event_type) references event_types
            on delete cascade,
    constraint "operation_FK"
        foreign key (operation) references operations
            on delete cascade
);








